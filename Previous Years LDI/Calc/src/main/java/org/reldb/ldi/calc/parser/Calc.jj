/*
 * A simple expression parser and evaluator
 *
 */

options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Calc)

package org.reldb.ldi.calc.parser;

import org.reldb.ldi.calc.calculator.*;

public class Calc {
	Calculator calc = new Calculator();
	public static void main(String args[]) throws ParseException {
		Calc parser = new Calc(System.in);
		parser.calculate();
	}
}

PARSER_END(Calc)


/*
 *
 * Lexer definitions
 *
 */

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN [IGNORE_CASE] : /* RESERVED WORDS AND LITERALS */
{
  < OR: "OR" >
| < AND: "AND" >
| < NOT: "NOT" >
| < TRUE: "TRUE" >
| < FALSE: "FALSE" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
     ( 
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
     )
   | (
      "'"
      (   (~["\'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
     )
  >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
| < #LETTER:
      [
       "a"-"z",
       "A"-"Z"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < PP: "++" >
| < MM: "--" >
}

TOKEN : /* OPERATOR SYMBOLS */
{
  < ASSIGN: ":=" >
| < PEQ: "+=" >
| < MEQ: "-=" >
| < UEQ: "@=" >
| < EQ: "=" >
| < GT: ">" >
| < LT: "<" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < HOOK: "?" >
| < COLON: ":" >
| < PLUS: "+" >
| < SUBT: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < REM: "%" >
}

/***********************************************
 *          THE GRAMMAR STARTS HERE            *
 ***********************************************/

void calculate() :
{}
{
     			      expression() ( expression() )* <EOF>
}

void expression() :
{}
{
			      simple_expression() ";" 
			      	{System.out.println(" " + calc.pop());}
}

void simple_expression() :
{}
{
                              or_expression()
}

void or_expression() : 
{} 
{ 
			      and_expression() ( <OR> and_expression() {calc.or();} )*
}

void and_expression() : 
{} 
{ 
			      compare_expression() ( <AND> compare_expression() {calc.and();} )*
}

void compare_expression() : 
{} 
{ 
                              add_expression() [
                                 "="  add_expression() {calc.eq();}
                               | "<>" add_expression() {calc.neq();}
                               | ">=" add_expression() {calc.gte();}
                               | "<=" add_expression() {calc.lte();}
                               | ">"  add_expression() {calc.gt();}
                               | "<"  add_expression() {calc.lt();}
                               ]
}

void add_expression() : 
{} 
{ 
                              mul_expression() (
                                  "+"  mul_expression() {calc.add();}
                                | "-"  mul_expression() {calc.subtract();}
                              )*
}

void mul_expression() : 
{} 
{ 
			      unary_expression() ( 
                                  "*" unary_expression() {calc.mult();} 
                                | "/" unary_expression() {calc.div();}
                              )*
}

void unary_expression() :
{}
{
                              <NOT> unary_expression()    {calc.not();}
                            | "+"   unary_expression()    {calc.unary_plus();}
                            | "-"   unary_expression()    {calc.unary_minus();}
                            | primary_expression()
}

void primary_expression() : 
{}
{
                              literal()
                            | "(" simple_expression() ")"
}

void literal() :
{}
{
							  integer()
							| rational()
							| bool()
}

void integer() : {Token t;} 
{ 
			      t = <INTEGER_LITERAL> {calc.push_integer(t.toString());}
}

void rational() : {Token t;} 
{ 
			      t = <FLOATING_POINT_LITERAL>  {calc.push_floating(t.toString());}
}

void bool() : 
{} 
{ 
			      			  <TRUE>  {calc.push_boolean(true);}
                            | <FALSE> {calc.push_boolean(false);}
}
